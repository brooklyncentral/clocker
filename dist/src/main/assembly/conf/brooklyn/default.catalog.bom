# Copyright 2014-2015 by Cloudsoft Corporation Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

brooklyn.catalog:
  version: "1.1.0-SNAPSHOT" # CLOCKER_VERSION
  items:

  # load everything in the classpath with a @Catalog annotation
  - scanJavaAnnotations: true

  - id: docker-infrastructure
    name: "Docker Infrastructure"
    item:
      type: clocker.docker.entity.DockerInfrastructure
      brooklyn.config:
        docker.version: 1.8.1 # DOCKER_VERSION
        entity.dynamicLocation.name: "my-docker-cloud"
        docker.container.cluster.headroom.count: 4
        docker.policy.ha.enable: false
        docker.container.strategies:
        - $brooklyn:object:
            type: clocker.docker.location.strategy.basic.MaxContainersPlacementStrategy
            brooklyn.config:
              maxContainers: 16
        - $brooklyn:object:
            type: clocker.docker.location.strategy.basic.BreadthFirstPlacementStrategy
        docker.host.spec:
          $brooklyn:entitySpec:
            type: docker-host

  - id: docker-host
    name: "Docker Host"
    item:
      type: clocker.docker.entity.DockerHost
      brooklyn.config:
        docker.host.driver.storage: overlay
        docker.host.nameFormat: "docker-%2$d"
        docker.container.spec:
          $brooklyn:entitySpec:
            type: docker-container
        docker.host.flags:
          minRam: 7g
          minCores: 2
          stopIptables: true
        start.timeout: 5m

  - id: docker-container
    name: "Docker Container"
    item:
      type: clocker.docker.entity.container.DockerContainer
      brooklyn.config:
        docker.container.nameFormat: "container-%2$02x"

  - id: calico-network
    name: "Calico Network"
    item:
      type: clocker.docker.networking.entity.sdn.calico.CalicoNetwork
      brooklyn.config:
        calico.version: 0.4.9
        sdn.agent.spec:
          $brooklyn:entitySpec:
            type: calico-node

  - id: calico-node
    name: "Calico Node"
    item:
      type: clocker.docker.networking.entity.sdn.calico.CalicoNode

  - id: calico-module
    name: "Calico Network Module"
    item:
      type: clocker.mesos.networking.entity.sdn.calico.CalicoModule
      brooklyn.config:
        calico.version: 0.8.0

  - id: etcd-node
    name: "Etcd Node"
    item:
      type: org.apache.brooklyn.entity.nosql.etcd.EtcdNode

  - id: etcd-proxy
    name: "Etcd Proxy"
    item:
      type: org.apache.brooklyn.entity.nosql.etcd.EtcdProxy

  - id: etcd-cluster
    name: "Etcd Cluster"
    item:
      type: org.apache.brooklyn.entity.nosql.etcd.EtcdCluster
      brooklyn.config:
        etcd.version: 2.0.11
        etcd.node.spec:
          $brooklyn:entitySpec:
            type: etcd-node

  - id: weave-network
    name: "Weave Network"
    item:
      type: clocker.docker.networking.entity.sdn.weave.WeaveNetwork
      brooklyn.config:
        weave.version: 1.1.2
        sdn.agent.spec:
          $brooklyn:entitySpec:
            type: weave-router

  - id: weave-router
    name: "Weave Router"
    item:
      type: clocker.docker.networking.entity.sdn.weave.WeaveRouter

  - id: docker-registry
    name: "Docker Registry"
    services:
    - type: clocker.docker.entity.container.registry.DockerRegistry
      brooklyn.config:
        docker.registry.port: 5000

  - id: mesos-cluster
    name: Mesos Cluster
    item:
      type: clocker.mesos.entity.MesosCluster
      brooklyn.config:
        entity.dynamicLocation.name: "my-mesos-cluster"

  - id: marathon-framework
    name: Marathon Framework
    item:
      type: clocker.mesos.entity.framework.marathon.MarathonFramework

  - id: docker-cloud
    name: "Clocker"
    description: |
      Docker Cloud infrastructure
    iconUrl: classpath://docker-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          docker.host.cluster.initial.size: 1
          docker.container.cluster.headroom.count: 0
          docker.container.strategies:
          - $brooklyn:object:
              type: clocker.docker.location.strategy.basic.MaxContainersPlacementStrategy
              brooklyn.config:
                maxContainers: 32
          - $brooklyn:object:
              type: clocker.docker.location.strategy.basic.DepthFirstPlacementStrategy
          sdn.enable: false

  - id: docker-cloud-calico
    name: "Clocker with Calico"
    description: |
      Docker Cloud infrastructure with Calico networking
    iconUrl: classpath://calico-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          sdn.enable: true
          sdn.provider.spec:
            $brooklyn:entitySpec:
              type: calico-network
              brooklyn.config:
                sdn.network.cidr: 50.0.0.0/16
                sdn.network.size: 24
          docker.host.spec:
            $brooklyn:entitySpec:
              type: docker-host
              brooklyn.config:
                docker.container.spec:
                  $brooklyn:entitySpec:
                    type: docker-container
                    brooklyn.config:
                      docker.container.nameFormat: "calico-%2$02x"

  - id: docker-cloud-weave
    name: "Clocker with Weave"
    description: |
      Docker Cloud infrastructure with Weave networking
    iconUrl: classpath://weaveworks-logo.png
    itemType: template
    item:
      services:
      - type: docker-infrastructure
        brooklyn.config:
          sdn.enable: true
          sdn.provider.spec:
            $brooklyn:entitySpec:
              type: weave-network
          docker.host.spec:
            $brooklyn:entitySpec:
              type: docker-host
              brooklyn.config:
                docker.container.spec:
                  $brooklyn:entitySpec:
                    type: docker-container
                    brooklyn.config:
                      docker.container.nameFormat: "weave-%2$02x"

  - id: external-mesos-cluster
    name: "External Mesos Cluster"
    description: |
      Access a running Mesos cluster
    iconUrl: classpath://mesos-logo.png
    itemType: template
    item:
      services:
      - type: mesos-cluster
        brooklyn.config:
          mesos.url: "http://localhost:5050/"

  - id: haproxy-controller
    name: "HAProxy"
    description: |
      HAProxy load balancer entity.
    itemType: template
    type: org.apache.brooklyn.entity.proxy.haproxy.HAProxyController
    brooklyn.config:
      docker.image.name: haproxy
      docker.image.tag: 1.5.9
      docker.container.directPorts.configKeys:
      - $brooklyn:sensor("org.apache.brooklyn.entity.proxy.AbstractController", "proxy.http.port")
      - $brooklyn:sensor("org.apache.brooklyn.entity.proxy.AbstractController", "proxy.https.port")
      install.dir: /usr/local/sbin/
      run.dir: /usr/local/etc/haproxy/
      member.sensor.hostname: "host.subnet.hostname"
      provisioning.properties:
        entity.dynamicLocation.flags:
          user: root

  - id: riak-cluster-demo-application
    name: "Riak Cluster Demo Application"
    description: |
      Riak cluster with load-balanced chatroom webapp
    iconUrl: classpath://riak-icon.png
    itemType: template
    item:
      services:
      - type: org.apache.brooklyn.entity.stock.BasicApplication
        brooklyn.children:
        - type: clocker.docker.networking.entity.VirtualNetwork
          networkId: webapp
        - type: clocker.docker.networking.entity.VirtualNetwork
          networkId: riak
        - type: org.apache.brooklyn.entity.nosql.riak.RiakCluster
          initialSize: 3
          id: riak-cluster
          name: "Riak Cluster"
          brooklyn.config:
            install.version: 2.1.1
            riak.networking.optimize: false
            network.list:
            - riak
        - type: org.apache.brooklyn.entity.webapp.ControlledDynamicWebAppCluster
          name: "Web Cluster"
          id: web-cluster
          brooklyn.config:
            initialSize: 2
            dynamiccluster.memberspec:
              $brooklyn:entitySpec:
                type: org.apache.brooklyn.entity.webapp.tomcat.Tomcat8Server
                brooklyn.config:
                  network.list:
                  - webapp
                  - riak
                  wars.root:
                    "https://s3-eu-west-1.amazonaws.com/brooklyn-clocker/brooklyn-example-hello-world-sql-webapp.war"
                  java.sysprops:
                    brooklyn.example.riak.nodes:
                      $brooklyn:component("riak-cluster").attributeWhenReady("riak.cluster.nodeList")
            controlleddynamicwebappcluster.controllerSpec:
              $brooklyn:entitySpec:
                type: haproxy-controller
                brooklyn.config:
                  network.list:
                  - webapp
          brooklyn.enrichers:
          # publish the mapped URL at the cluster
          - type: org.apache.brooklyn.enricher.stock.Propagator
            brooklyn.config:
              uniqueTag: url-propagator
              enricher.producer: $brooklyn:component("haproxy")
              enricher.propagating.inclusions:
              - mapped.main.uri
        brooklyn.enrichers:
        # publish the URL (both mapped and unmapped) at the top-level app
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: url-propagator
            enricher.producer: $brooklyn:component("web-cluster")
            enricher.propagating.inclusions:
            - main.uri
            - mapped.main.uri

  - id: nodejs-demo-application
    name: "Node.js Demo Application"
    description: |
      Node.js todo list application with redis database
    iconUrl: classpath://node-js-icon.png
    itemType: template
    item:
      services:
      - type: org.apache.brooklyn.entity.stock.BasicApplication
        brooklyn.children:
        - type: org.apache.brooklyn.entity.nosql.redis.RedisStore
          id: redis
          name: "Redis"
          brooklyn.config:
            install.version: 3.0.3
        - type: org.apache.brooklyn.entity.webapp.nodejs.NodeJsWebAppService
          id: nodejs
          name: "Node.js"
          brooklyn.config:
            docker.direct.ports:
            - "http.port"
            gitRepoUrl:
              "https://github.com/grkvlt/nodejs-todo/"
            appFileName: server.js
            appName: nodejs-todo
            nodePackages:
            - express
            - ejs
            - jasmine-node
            - underscore
            - method-override
            - cookie-parser
            - express-session
            - body-parser
            - cookie-session
            - redis
            - redis-url
            - connect
            env:
              REDISTOGO_URL: >
                $brooklyn:formatString("redis://%s:%d/",
                component("redis").attributeWhenReady("host.subnet.hostname"),
                component("redis").attributeWhenReady("redis.port"))
            launch.latch: $brooklyn:component("redis").attributeWhenReady("service.isUp")
            provisioning.properties:
              installDevUrandom: true
        brooklyn.enrichers:
        # publish the URL (both mapped and unmapped) at the top-level app
        - type: org.apache.brooklyn.enricher.stock.Propagator
          brooklyn.config:
            uniqueTag: url-propagator
            enricher.producer: $brooklyn:component("nodejs")
            enricher.propagating.inclusions:
            - webapp.url	
            - mapped.webapp.url	

# vim:ts=2:sw=2:ft=yaml:
